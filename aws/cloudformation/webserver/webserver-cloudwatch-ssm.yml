Parameters:

  EnvironmentName:
    Description: An environment name that is prefixed to resource names.
    Type: String
    Default: WebServer

  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16

  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone.
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  KeyName:
    Description: Please enter the name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: 'AWS::EC2::KeyPair::KeyName'

  RemoteAccessCIDR:
    Description: Please enter the IP range (CIDR notation) for remote access to the EC2 instance.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  WebServerInstanceType:
    Description: Please enter the EC2 instance type.
    Type: String
    ConstraintDescription: Must select a valid instance type.
    Default: t2.nano

Resources:

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Internet Gateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} VPC'

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet'

  WebServerPublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: web-server-ingress-sg
      GroupDescription: Security group for web server ingress.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Web Server Security Group'

  CloudWatchAgentConfig:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: json configuration for cloud Watch agent.
      Name: !Join 
        - '-'
        - - 'AmazonCloudWatch'
          - 'AgentConfig'
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Tier: Standard
      Type: String
      Value: '{
                "agent": {
                  "metrics_collection_interval": 60,
                  "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                },
                "logs": {
                  "logs_collected": {
                    "files": {
                      "collect_list": [
                        {
                        "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-amazon-cloudwatch-agent",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/messages",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-message",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/cron",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-cron",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/yum.log",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-yum",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/secure",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-secure",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/httpd/access_log",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-apache-access",
                        "timezone": "UTC"
                        },
                        {
                        "file_path": "/var/log/httpd/error_log",
                        "log_group_name": "{instance_id}",
                        "log_stream_name": "{hostname}-apache-error",
                        "timezone": "UTC"
                        }
                      ]
                    }
                  }
                },
                "metrics": {
                  "append_dimensions": {
                    "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                    "ImageId": "${!aws:ImageId}",
                    "InstanceId": "${!aws:InstanceId}",
                    "InstanceType": "${!aws:InstanceType}"
                  },
                  "metrics_collected": {
                    "cpu": {
                      "measurement": [
                        "cpu_usage_idle",
                        "cpu_usage_nice"
                      ],
                    "metrics_collection_interval": 60,
                    "resources": [
                      "*"
                    ],
                    "totalcpu": false
                    },
                    "disk": {
                      "measurement": [
                        "used_percent",
                        "total"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "diskio": {
                      "measurement": [
                        "write_bytes",
                        "read_bytes",
                        "writes",
                        "reads"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "mem": {
                      "measurement": [
                        "mem_total",
                        "mem_used_percent"
                      ],
                      "metrics_collection_interval": 60
                    },
                    "net": {
                      "measurement": [
                        "bytes_sent",
                        "bytes_recv",
                        "packets_sent",
                        "packets_recv"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "swap": {
                      "measurement": [
                        "swap_free",
                        "swap_used",
                        "swap_used_percent"
                      ],
                      "metrics_collection_interval": 60
                    }
                  }
                }
              }'

  WebServerInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'WebServerInstanceRole-EC2-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
       -  arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /

  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebServerInstanceRole

  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          setup:
            - configure-cfn-hup
            - install-cloudwatch-agent
            - configure-cloudwatch-agent
            - restart-cloudwatch-agent
            - amazon-linux-extras
            - install-frontend
          update:
            - configure-cfn-hup
            - configure-cloudwatch-agent
            - restart-cloudwatch-agent
        configure-cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets update '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+
                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf        
        install-cloudwatch-agent:
          packages:
            yum:
              amazon-cloudwatch-agent: []
        configure-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/dummy.version':
              content: !Sub |
                "Dummy file to manually pull config from ssm after update."
                "VERSION=1.0"
        restart-cloudwatch-agent:
          commands:
            01_stop_cloudwatch:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_cloudwatch:
              command:
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref CloudWatchAgentConfig }
        amazon-linux-extras:
          commands:
            ale_php73:
              command: "amazon-linux-extras enable php7.3"
              cwd: "~"
        install-frontend:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Join 
                - ''
                - - |
                    <html>
                  - |2
                      <head>
                  - |2
                        <title>AWS CloudFormation PHP Sample</title>
                  - |2
                        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                  - |2
                      </head>
                  - |2
                      <body>
                  - |2
                        <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Print out the current data and tie
                  - |2
                          print "The Current Date and Time is: <br/>";
                  - |2
                          print date("g:i A l, F j Y.");
                  - |2
                        ?>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Setup a handle for CURL
                  - |2
                          $curl_handle=curl_init();
                  - |2
                          curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                  - |2
                          curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                  - |2
                          // Get the hostname of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                  - |2
                          $hostname = curl_exec($curl_handle);
                  - |2
                          if (empty($hostname))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no hostname back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "Server = " . $hostname . "<br />";
                  - |2
                          }
                  - |2
                          // Get the instance-id of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                  - |2
                          $instanceid = curl_exec($curl_handle);
                  - |2
                          if (empty($instanceid))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no instance id back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "EC2 instance-id = " . $instanceid . "<br />";
                  - |2
                          }
                  - |2
                        ?>
                  - |2
                        <h2>PHP Information</h2>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          phpinfo();
                  - |2
                        ?>
                  - |2
                      </body>
                  - |
                    </html>
              mode: '000600'
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref WebServerInstanceType
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets setup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
      SecurityGroupIds:
        - !Ref WebServerPublicSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Web Server'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

Outputs:

  VPC:
    Description: A reference to the created VPC.
    Value: !Ref VPC

  PublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone.
    Value: !Ref PublicSubnet

  WebServerPublicSecurityGroup:
    Description: Security group for webserver.
    Value: !Ref WebServerPublicSecurityGroup

  WebsiteURL:
    Description: URL for newly created webserver.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
