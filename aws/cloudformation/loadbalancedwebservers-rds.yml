Description: To be completed...

Parameters:

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "Sample Project"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.11.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.21.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  EC2KeyPair:
    Description: Please enter the name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: 'AWS::EC2::KeyPair::KeyName'

  RemoteAccessCIDR:
    Description: Please enter the IP range (CIDR notation) for remote access to the EC2 instance.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  WebServerInstanceType:
    Description: Please enter the EC2 instance type
    Type: String
    ConstraintDescription: Must select a valid instance type.
    Default: t2.nano

  DBInstanceID:
    Description: Please enter the instance id
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
    Default: mydbinstance

  DBName:
    Description: Please enter the database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: mydb

  DBInstanceClass:
    Description: Please enter the DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t2.micro

  DBAllocatedStorage:
    Description: Please enter the the size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
    Default: '5'

  DBUsername:
    NoEcho: 'true'
    Description: Please enter the username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    NoEcho: 'true'
    Description: Please enter the password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Internet Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "loadbalancer-sg"
      GroupDescription: "Security group for load balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer Security Group

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds: !GetAtt LoadBalancerSecurityGroup.GroupId
      # LoadBalancerAttributes:
      #   - Key: access_logs.s3.enabled
      #     Value: 'true'
      #   - Key: access_logs.s3.bucket
      #     Value: !Ref LogsBucket
      #   - Key: access_logs.s3.prefix
      #     Value: Logs
      # DependsOn: LogsBucketPolicy
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer

  # LogsBucket:
  #   Type: 'AWS::S3::Bucket'
  #   DeletionPolicy: Retain

  # LoadBalancerLogsBucketPolicy:
  #   Type: 'AWS::S3::BucketPolicy'
  #   Properties:
  #     Bucket: !Ref LoadBalancerLogsBucket
  #     PolicyDocument:
  #       Version: 0.1
  #       Statement:
  #         - Sid: ELBAccessLogs
  #           Effect: Allow
  #           Resource: !Join 
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref LogsBucket
  #               - /ALB
  #               - /*
  #           Principal: '*'
  #           Action:
  #             - 's3:PutObject'

  LoadBalancerAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 
            - LoadBalancer
            - LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt 
            - TargetGroup1
            - TargetGroupFullName
      MetricName: UnHealthyHostCount
      Period: 60
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer Alarm

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Listener

  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: Referer
            Values:
              - 'https://www.amazon.com/'
      ListenerArn: !Ref Listener
      Priority: 1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Listener Rule 1

  ListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Chrome
      ListenerArn: !Ref Listener
      Priority: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Listener Rule 2

  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetType: instance
      Target: !Ref PublicWebServer1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Target Group 1

  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetType: instance
      Target: !Ref PublicWebServer2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Target Group 2

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds: 
        - PrivateSubnet1
        - PrivateSubnet2
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet Group

  PublicWebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "web-server-ingress-sg"
      GroupDescription: "Security group for web server ingress"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref RemoteAccessCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Web Server Security Group

  PublicWebServer1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: "ami-79fd7eee"
      InstanceType: !Ref WebServerInstanceType
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: !GetAtt PublicWebServerSecurityGroup.GroupId
      KeyName: !Ref EC2KeyPair
## Place 'AWS::CloudFormation::Init' here
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Web Server 1

  PublicWebServer2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: "ami-79fd7eee"
      InstanceType: !Ref WebServerInstanceType
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds: !GetAtt PublicWebServerSecurityGroup.GroupId
      KeyName: !Ref EC2KeyPair
## Place 'AWS::CloudFormation::Init' here
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Web Server 2

  PrivateDataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "database-sg"
      GroupDescription: "Security group for db access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 33306
        SourceSecurityGroupId: !GetAtt PublicWebServerSecurityGroup.GroupId
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Database Security Group

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBSecurityGroups: !GetAtt PrivateDataBaseSecurityGroup.GroupId
      DBSubnetGroupName: DBSubnetGroup
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      EngineVersion: 5.6
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
#      MonitoringInterval: '60'
#      MonitoringRoleArn: 'arn:aws:iam::123456789012:role/rds-monitoring-role'
      PubliclyAccessible: no
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Database Instance

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet2

  PublicWebServerSecurityGroup:
    Description: Security group for webserver
    Value: !Ref PublicWebServerSecurityGroup

  PrivateDataBaseSecurityGroup:
    Description: Security group for db
    Value: !Ref PrivateDataBaseSecurityGroup

  DBInstanceId:
    Description: InstanceId of the newly created RDS Instance
    Value: !Ref DBInstanceID

  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
