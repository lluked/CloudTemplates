Description: lamp Stack. amzn2-ami-hvm-x86_64-gp2, httpd, mysql 8.0 rds db, php 7.3. cloudwatch logging.

Parameters:

  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16
  
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.21.0/24

  KeyName:
    Description: Please enter the name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: 'AWS::EC2::KeyPair::KeyName'

  RemoteAccessCIDR:
    Description: Please enter the IP range (CIDR notation) for remote access to the EC2 instance.
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  WebServerInstanceType:
    Description: Please enter the EC2 instance type.
    Type: String
    ConstraintDescription: Must select a valid instance type.
    Default: t2.nano

  DBInstanceID:
    Description: Please enter the instance id.
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
    Default: mydbinstance

  DBName:
    Description: Please enter the database name.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: mydb

  DBInstanceClass:
    Description: Please enter the DB instance class.
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t2.micro

  DBAllocatedStorage:
    Description: Please enter the the size of the database (GiB).
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: Must be between 20 and 65536 GiB.
    Default: '5'

  DBUsername:
    Description: Please enter the username for MySQL database access.
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: dbuser

  DBPassword:
    NoEcho: true
    Description: Please enter the password for MySQL database access.
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.

Resources:

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Internet Gateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} VPC'

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Routes'

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Subnet'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Subnet (AZ1)'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Subnet (AZ2)'

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for db.
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} RDS Private Subnet Group'

  WebServerPublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: web-server-ingress-sg
      GroupDescription: Security group for web server ingress.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Web Server Public Security Group'

  CloudWatchAgentConfig:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: json configuration for cloud Watch agent.
      Name: !Sub 'AmazonCloudWatch-${AWS::StackName}-AgentConfig'
      Tier: Standard
      Type: String
      Value: !Sub |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                    "log_group_name": "amazon-cloudwatch-agent-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "message-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/cron",
                    "log_group_name": "cron-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/yum.log",
                    "log_group_name": "yum-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/secure",
                    "log_group_name": "secure-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "httpd_access-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "httpd_error-logs",
                    "log_stream_name": "${AWS::StackName}-{instance_id}",
                    "timezone": "UTC"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
              "ImageId": "${!aws:ImageId}",
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}"
            },
            "metrics_collected": {
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_nice"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ],
                "totalcpu": false
              },
              "disk": {
                "measurement": [
                  "used_percent",
                  "total"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "diskio": {
                "measurement": [
                  "write_bytes",
                  "read_bytes",
                  "writes",
                  "reads"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_total",
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "net": {
                "measurement": [
                  "bytes_sent",
                  "bytes_recv",
                  "packets_sent",
                  "packets_recv"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "swap": {
                "measurement": [
                  "swap_free",
                  "swap_used",
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  WebServerInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-WebServerInstanceRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
       -  arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /

  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-WebServerInstanceProfile'
      Path: /
      Roles:
        - !Ref WebServerInstanceRole

  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          setup:
            - configure-cfn-hup
            - install-cloudwatch-agent
            - configure-cloudwatch-agent
            - restart-cloudwatch-agent
            - amazon-linux-extras
            - install-frontend
            - install-site
          update:
            - configure-cloudwatch-agent
            - restart-cloudwatch-agent
            - install-site
        configure-cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets update --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install-cloudwatch-agent:
          packages:
            yum:
              amazon-cloudwatch-agent: []
        configure-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/dummy.version':
              content: |
                "Dummy file - Modify to pull config from ssm after update of stack."
                "VERSION=1.0"
        restart-cloudwatch-agent:
          commands:
            01_stop_cloudwatch:
              command: "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop"
            02_start_cloudwatch:
              command: !Sub
                - "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${agentconfig} -s"
                - agentconfig: !Ref CloudWatchAgentConfig
        amazon-linux-extras:
          commands:
            ale_php73:
              command: "amazon-linux-extras enable php7.3"
              cwd: "~"
        install-frontend:
          packages:
            yum:
              httpd: []
              php: []
              php-mysqlnd: []
        install-site:
          files:
            /var/www/html/index.php:
              content: !Sub 
                - |
                  <html>
                    <head>
                      <title>AWS CloudFormation PHP Sample</title>
                      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                    </head>
                    <body>
                      <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
                      <p/>
                      <?php
                        // Print out the current data and time
                        print "The Current Date and Time is: <br/>";
                        print date("g:i A l, F j Y.");
                      ?>
                      <p/>
                      <?php
                        // Setup a handle for CURL
                        $curl_handle=curl_init();
                        curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                        curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                        // Get the hostname of the intance from the instance metadata
                        curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                        $hostname = curl_exec($curl_handle);
                        if (empty($hostname))
                        {
                          print "Sorry, for some reason, we got no hostname back <br />";
                        }
                        else
                        {
                          print "Server = " . $hostname . "<br />";
                        }
                        // Get the instance-id of the intance from the instance metadata
                        curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                        $instanceid = curl_exec($curl_handle);
                        if (empty($instanceid))
                        {
                          print "Sorry, for some reason, we got no instance id back <br />";
                        }
                        else
                        {
                          print "EC2 instance-id = " . $instanceid . "<br />";
                        }
                        $Database   = "${dbdatabase}";
                        $DBUser     = "${dbuser}" ;
                        $DBPassword = "${dbpassword}";
                        print "Database = " . $Database . "<br />";
                        $dbconnection = mysqli_connect($Database, $DBUser, $DBPassword)
                                        or die("Could not connect: " . mysql_error());
                        print ("Connected to $Database successfully");
                        mysqli_close($dbconnection);
                      ?>
                      <h2>PHP Information</h2>
                      <p/>
                      <?php
                        phpinfo();
                      ?>
                    </body>
                  </html>
                - dbdatabase: !GetAtt
                    - DBInstance
                    - Endpoint.Address
                  dbuser: !Ref DBUsername
                  dbpassword: !Ref DBPassword
              mode: '000600'
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref WebServerInstanceType
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets setup --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
      SecurityGroupIds:
        - !Ref WebServerPublicSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Web Server Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
 
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: database-sg
      GroupDescription: Security group for db access.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 33306
          SourceSecurityGroupId: !GetAtt WebServerPublicSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Database Security Group'

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceIdentifier: !Join 
        - '-'
        - - !Sub ${AWS::StackName}
          - !Ref DBInstanceID
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      EngineVersion: 8.0
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: no
      VPCSecurityGroups:
       - !Ref DBSecurityGroup  
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Database Instance'

Outputs:

  VPC:
    Description: A reference to the created VPC.
    Value: !Ref VPC

  PublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone.
    Value: !Ref PublicSubnet

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone.
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone.
    Value: !Ref PrivateSubnet2

  WebServerPublicSecurityGroup:
    Description: Security group for webserver.
    Value: !Ref WebServerPublicSecurityGroup

  DBSecurityGroup:
    Description: Security group for db.
    Value: !Ref DBSecurityGroup

  DBInstanceId:
    Description: InstanceId of the newly created RDS Instance.
    Value: !Ref DBInstanceID

  WebsiteURL:
    Description: URL for newly created webserver.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName

  PrivateDBAddress:
    Description: Address for newly created db endpoint.
    Value: !Join 
      - ''
      - - !GetAtt 
          - DBInstance
          - Endpoint.Address
